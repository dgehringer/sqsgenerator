name: Wheels

on:
  release:
    types:
      - published
  push:
    branches:
      - main


permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VCPKG_FEATURE_FLAGS: "-manifests"

jobs:
  build_wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-15]
        python-version: ["3.10", "3.11"]
    env:
      VCPKG_BINARY_SOURCES: "x-gha,readwrite"
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed

    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '')

      - uses: actions/checkout@v4
        with:
          submodules: recursive

          # Required on macOS to build gmp package
      - name: Install autoconf
        run: brew install autoconf-archive libtool automake pkgconf pkg-config
        if: ${{ runner.os == 'macOS' }}

      - uses: friendlyanon/setup-vcpkg@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Compile & install build dependencies
        run: |
          pip install pip-tools
          pip-compile --all-build-deps --output-file=requirements-ci.txt --strip-extras ./python/pyproject.toml
          pip install -r requirements-ci.txt

      - name: Build wheel package
        run: python -m build --wheel ./python --no-isolation

      - name: Install package
        run: pip install ./python/dist/*.whl

      - name: Compile & install test dependencies
        run: |
          pip install pip-tools
          pip-compile --extra=test -o requirements-test.txt ./python/pyproject.toml
          pip install -r requirements-test.txt

      - name: Run unit tests
        run: pytest ./python -vv --import-mode=importlib

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: python/dist/*.whl

  upload_all:
    name: Upload if release
    needs: [build_wheel]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_password }}

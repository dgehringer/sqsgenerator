name: python-ci.yml

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VCPKG_FEATURE_FLAGS: "-manifests"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-15]
        python-version: ["3.11"]
    env:
      VCPKG_BINARY_SOURCES: "x-gha,readwrite"
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed

    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '')

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: friendlyanon/setup-vcpkg@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CI dependencies
        run: pip install ruff

      - name: Compile & install build dependencies
        run: |
          pip install pip-tools
          pip-compile --all-build-deps --output-file=requirements-ci.txt --strip-extras ./python/pyproject.toml
          pip install -r requirements-ci.txt

      - name: Lint
        run: ruff check ./python/sqsgenerator --output-format=github

      - name: Format
        run: ruff format --diff ./python/sqsgenerator

      - name: Build package
        run: pip install ./python --no-build-isolation -v

      - name: Compile & install test dependencies
        run: |
          pip install pip-tools
          pip-compile --extra=test -o requirements-test.txt ./python/pyproject.toml
          pip install -r requirements-test.txt

      - name: Run unit tests
        run: pytest ./python -vv --import-mode=importlib --junitxml=junit/test-results-${{ matrix.python-version }}-${{ matrix.os }}.xml

      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: junit/test-results-${{ matrix.python-version }}-${{ matrix.os }}.xml
          # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Build ctest executables
        run: ${{ github.workspace }}/scripts/build-tests.sh build
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}

      - name: Run ctest
        run: ctest --test-dir ${{ github.workspace }}/build/tests --verbose --output-junit ${{ github.workspace }}/junit/test-results-${{ matrix.os }}.xml
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      - name: Build CLI app
        run: ${{ github.workspace }}/scripts/build-cli.sh build
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}

      - name: Run sqsgen --version
        run: ${{ github.workspace }}/build/sqsgen --version
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}

      - name: Upload ctest test results
        uses: actions/upload-artifact@v4
        with:
          name: ctest-results-${{ matrix.os }}
          path: junit/test-results-${{ matrix.os }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
